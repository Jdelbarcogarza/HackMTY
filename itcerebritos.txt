# -*- coding: utf-8 -*-
"""ITCerebritos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-DYAHvJW40cM_3LTy1lCKfuIDEw2l8mw
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
from pandas import Series
import matplotlib.pyplot as plt
import numpy as np

datos = pd.read_excel('Entrenamiento_0020.xlsx')
datos_prueba = pd.read_excel('Prueba_2121.xlsx')

df_train = pd.DataFrame(data=datos)
df_test = pd.DataFrame(data=datos_prueba)

datos_INPC = df_train['INPC'].values
datos_Subyacente = df_train['Subyacente'].values
datos_tiempo = df_train['tiempo'].values
prueba_INPC = df_test['INPC'].values
prueba_Subyacente = df_test['Subyacente'].values
prueba_tiempo = df_test['tiempo'].values

datos_INPC = datos_INPC.reshape(-1, 1)
datos_Subyacente = datos_Subyacente.reshape(-1, 1)
datos_tiempo = datos_tiempo.reshape(-1, 1)
prueba_INPC = prueba_INPC.reshape(-1, 1)
prueba_Subyacente = prueba_Subyacente.reshape(-1, 1)
prueba_tiempo = prueba_tiempo.reshape(-1, 1)

from sklearn.model_selection import train_test_split
train_tiempo, validation_tiempo, train_INPC, validation_INPC = train_test_split(datos_tiempo, datos_INPC, test_size=0.2, random_state=0) 
train_tiempo, validation_tiempo, train_Subyacente, validation_Subyacente = train_test_split(datos_tiempo, datos_Subyacente, test_size=0.2, random_state=0) 

from sklearn.linear_model import LinearRegression
modelo_regresion_INCP = LinearRegression()
modelo_regresion_INCP.fit(train_tiempo, train_INPC)
modelo_regresion_Sub = LinearRegression()
modelo_regresion_Sub.fit(train_tiempo, train_Subyacente)

sample_pred_INPC = modelo_regresion_INCP.predict(validation_tiempo)
sample_pred_Sub = modelo_regresion_Sub.predict(validation_tiempo)

#from sklearn.metrics import r2_score
#r2_score(INPC_validation, sample_pred_INPC)

from sklearn.metrics import mean_absolute_error
print("MAE general entrenamiento: " + str(mean_absolute_error(validation_INPC, sample_pred_INPC)))
print("MAE subyacente entrenamiento: " + str(mean_absolute_error(validation_Subyacente, sample_pred_Sub)))

test_pred_INPC = modelo_regresion_INCP.predict(prueba_tiempo)
test_pred_Sub = modelo_regresion_Sub.predict(prueba_tiempo)
print("MAE general predicción: " + str(mean_absolute_error(prueba_INPC, test_pred_INPC)))
print("MAE subyacente predicción: " + str(mean_absolute_error(prueba_Subyacente, test_pred_Sub)))

rango = []
for i in range(101):
  rango.append(i)

plt.plot(rango, sample_pred_INPC, rango, validation_INPC)
plt.xlabel("Tiempo")
plt.ylabel("INPC")
plt.legend(["Entrenamiento","Validación"])
f = plt.figure()
f.set_figwidth(100)
f.set_figheight(100)

rango = []
for i in range(101):
  rango.append(i)

plt.plot(rango, sample_pred_Sub, rango, validation_Subyacente)
plt.xlabel("Tiempo")
plt.ylabel("Subyacente")
plt.legend(["Entrenamiento","Validación"])
f = plt.figure()
f.set_figwidth(100)
f.set_figheight(100)

rango = []
for i in range(15):
  rango.append(i)

plt.plot(rango, test_pred_INPC, rango, prueba_INPC)
plt.xlabel("Tiempo")
plt.ylabel("INPC General")
plt.legend(["Predicción 2021","Datos"])
f = plt.figure()
f.set_figwidth(100)
f.set_figheight(100)
test_pred_INPC

rango = []
for i in range(15):
  rango.append(i)

plt.plot(rango, test_pred_Sub, rango, prueba_Subyacente)
plt.xlabel("Tiempo")
plt.ylabel("Subyacente")
plt.legend(["Predicción 2021","Datos"])
f = plt.figure()
f.set_figwidth(100)
f.set_figheight(100)
test_pred_Sub